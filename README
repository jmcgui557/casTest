Clean and Simple Test
=====================

Author
------
Randall White (aka obibuffett)
obibuffett@cfl.rr.com
obibuffett@icloud.com

Introduction
------------
casTest is system of software tools (make files, scripts, and the casTest
executable and library files) which designed to make test driven development in
C++ a bit easier.  Hopefully, quite a bit easier.  casTest is meant to be
cleanly coded, and easy to use (and easy understand).  Comments, question,
and/or suggestions are most welcome.  Feel free to contact me at GitHub
(obibuffett), or send email to:

    obibuffett@cfl.rr.com

casTest is distributed with all source code.  It is available in an easy to use
self-extracting tarball (installCast.bin) or can be obtained by cloning the
casTest repository from GitHub:

    https://github.com/obibuffett/casTest.git

Building casTest from git Repository
----------------------------
If you clone casTest from GitHub, you'll want to copy the file
<casTestParentDir>/casTest/tools/castEnv.sourceMe.bash to your home directory
and edit the line:

    export CAST_DIR=

to define CAST_DIR as the casTest project root.  It should look something like
this when you are done:

    export CAST_DIR=$HOME/casTest

Source your edited version of castEnv.sourceMe.bash, cd to the casTest project
root directory and execute make.:
 
    > . ~/castEnv.sourceMe.bash
    > cd $CAST_DIR
    > make install

You can now create, build and run tests as described in the Quick Start 
section below.  


Installing from installCast.bin
-------------------------------
These instructions assume the user is using the bash shell.  The environment
script should be easy to adapt for other shells as it only sets a few 
environment variables.  (Sorry for any inconvenience.) 
 
- Run installCast.bin.
  > ./installCast.bin

If you like, install as root so that all developers on the system can
use casTest.

  > sudo ./installCast.bin


The only real difference between installing as a normal user vs root is the
default casTest installation location.  Installed as a normal user, casTest will
default to $HOME/cast.  Installed as root, the default installation location
is /usr/local/cast.  Also, when installing as a normal user, the environment
setup script is automatically generated and place in the user's home director.
When installed as root, this file is placed in the casTest installation
directory: by default /usr/local/cast.  For convenience, users should link this
file to their home directories.  The user then sources this file before
performing TDD using casTest.

Quick Start (normal user installation)
--------------------------------------

- Source castEnv.sourceMe.bash.
  > . ~/castEnv.sourceMe.bash

- Create a test dir and cd to it.
  > mkdir -p ~/myKata
  > cd ~/myKata

- Initialize a new test suite.
  > casTest -initTest myKata

  This step produces two files within the new directory:
    -- Makefile (makefile for myKata.test)
    -- myKata.tpp (source file for myKata.test)

  Despite the .tpp extension, myKata.tpp is a C++ source file.  It
  illustrates the use of the macros (defined in testCase.h) DEFINE_TEST
  and END_DEF.  These macros are provided to allow tests to be defined
  quickly and painlessly.  If you open myKata.tpp, you will see the
  test, SanityTest, defined as follows:

  DEFINE_TEST(SanityTest)
  void run()
  {
      bool val(false);

      Assert(val,
             "Please change val to true");
  }
  END_DEF

  As you can see, Assert() should fail when the line is executed as val is 
  initially defined as false.  You can build and run the test using make.

- Run make specifying 'test' as the target.
  > make test

  This step processes myKata.tpp, creates myKata.cpp, and builds then runs the
  test.  The output will be similar to the following:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |     -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  \
  |     -shared  -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |  
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  not ok 1 - SanityTest
  |  	---
  |  	Caught cas::Test::Error: ERROR [testCase.cpp(58)]: Assertion FAILED: \
  |  Please change val to true,  and try again.
  |  	---
  |  casTest: 1 tests FAILED.
  |  
  |  make: *** [test] Error 1

- Edit myKata.tpp changing the line "bool val(false);" to read
  "bool val(true);"

- Rerun the test.
  > make test

  The output will now indicate success:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |  -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  -shared\
  |   -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  ok 1 - SanityTest
  |  casTest: All tests PASSED.

- Other tests can be added to myKata.tpp to create an entire suite of tests.
  Typically, several related tests will be added to the same .tpp file.
  Hopefully, this short intro will get you started.  For more detailed
  information about the working of casTest, see the manual (currently under
  construction).

Happy Coding,
Randy
