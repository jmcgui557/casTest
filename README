Clean and Simple Test
=====================

Author
------
Randall White
Copyright (C) 2015
Released under the MIT license.
(Please see LICENSE file in top-level directory.)

obibuffett@cfl.rr.com
rlwhite@cfl.rr.com

Introduction
------------
casTest is system of software tools (make files, scripts, library, and the
casTest executable) which is designed to make test driven development in C++
a bit easier.  Hopefully, quite a bit easier.  casTest is distributed with all
source code.  It is available in an easy to use self-extracting tarball from
one of my dropbox folders.  Just point your browser to:

    https://www.dropbox.com/sh/2wtklxt4tyqoant/AAA54F3BVCyvVCvJiYVz6WNPa?dl=0

or use wget:
    
    wget https://www.dropbox.com/s/pv2xcu72m3z8nd0/installCast.bin
 
If you like, you can clone the project from GitHub:

    git clone https://github.com/obibuffett/casTest.git

casTest started out as a personal project just to explore questions related
to testing frameworks.  As someone once said, to figure out how something
works, sometimes you have to implement it yourself.  (I seem to recall reading
this in one of Scott Meyers' books, but I can't seem to find the quote.  If
I have this wrong, my apologies to both Scott Meyers and the actual author.)
The casTest framework is the result of this exploration and was built using
Test Driven Development principles.  Although the suite of tests found in 
<CAST_DIR>/src/test/selftest.test is now loaded as any other suite of tests
built to be executed with casTest, they started out as self-test routines
within casTest.cpp.  They were refactored after casTest had matured
sufficiently.

Installing from the Self-extracting tarball
--------------------------------------
Installing casTest from the self-extracting tarball is probably the easiest
method of installation.  This is especially true for installing to a system
directory such as /usr/local or /opt as root.

To install casTest in this method, just copy installCast.bin to a directory
for which you have access and execute it.  If you'd like to install as root,
just use sudo (or su or login as root) to run installCast.bin.

    > ./installCast.bin
or
    > sudo ./installCast.bin

Whether you install as a normal user or as root, you will be prompted for
a top-level installation location.  To accept the displayed default location,
just hit [enter].  The default installation location for normal users is
$HOME/cast.  For root it is /usr/local/cast.

After entering (or accepting) the installation location, installCast.bin will
do the following:

    - extract itself to the selected location
    - create resource scripts (castEnv.sourceMe.bash and castEnv.sourceMe.csh)
      in the installation directory
    - do a full build of all targets (libcasTest.a, casTest, and selftest.test)
    - run the self tests located in <castParentDir>/cast/src/tests

If you are installing as a normal user, installCast.bin will create a link
to castEnv.sourceMe.bash and castEnv.sourceMe.csh in your HOME directory.
You should source the file appropriate for your shell before beginning a test
creation session.  Each file sets a few environment variables and adds the
path to the casTest executable to your PATH variable.  If you don't use bash,
csh, or tcsh you'll need to create your own script to set the casTest
environment variables.  Sorry for any inconvenience, one of these days I hope
to remove the need to source one of these files.  If you are installing
as root, these links will not be created.  In this case, users wishing to,
may create the link themselves:

    #Creating a link to /usr/local/cast/castEnv.sourceMe.bash
    > cd $HOME
    > ln -s /usr/local/cast/castEnv.sourceMe.bash .

    or for tcsh or csh

    #Creating a link to /usr/local/cast/castEnv.sourceMe.bash
    > cd $HOME
    > ln -s /usr/local/cast/castEnv.sourceMe.csh .

Whether installed as a normal user or root, castEnv.sourceMe.[bash|csh] can
be sourced directly from the installation directory:

    > . <castParentDir>/cast/castEnv.sourceMe.bash

or, of course,

    > source <castParentDir>/cast/castEnv.sourceMe.csh

Installing from Git Repository Clone
-------------------------------
If you obtained casTest by cloning a Git repository, just cd to the top level
project directory and make the project:

    > cd <casTestParentDir>/cast
    > make install

The top-level make file is written to automatically generate the require
environment scripts (for bash and csh), source the appropriate one (assuming 
you are using bash or csh), and proceed to execute all make scripts
in the project tree.  When executing "make install" the make targets are
installed as follows:
          
          - casTest (executable): <casParentDir>/cast/bin
          - libcasTest.a: <castParentDir>/cast/lib
          - selftest.test: <castParentDir/cast/test
          - casTest.sourceMe.bash: <castParentDir>/cast
          - casTest.sourceMe.csh: <castParentDir>/cast
          - casTest.sourceMe.bash: linked to $HOME
          - casTest.sourceMe.csh: linked to $HOME

Source the appropriate file before using casTest.

Quick Start
--------------------------------------
After installing casTest, just source castEnv.sourceMe.bash (or
castEnv.sourceMe.csh for csh or tcsh) and you'll be ready to create your
first test.  
 
- Source castEnv.sourceMe.bash.
  > . ~/castEnv.sourceMe.bash
  
  or
  
  > source ~/castEnv.sourceMe.csh

- Create a test dir and cd to it.
  > mkdir ~/myTestDir
  > cd ~/myTestDir

- Initialize a new test suite.
  > casTest -addTestSuite myTest

  This step produces three files within the new directory:
    -- Makefile (which calls other casTest generated make files within the
                 directory)
    -- myTest.mak (make file for myTest.test)
    -- myTest.tpp (source file for myTest.test)

  Despite the .tpp suffix, myTest.tpp is a C++ source file.  It
  illustrates the use of the macros (defined in testCase.h) DEFINE_TEST
  and END_DEF.  These macros are provided to allow tests to be defined
  quickly and painlessly.  If you open myTest.tpp, you will see the
  test, "SanityTest", defined as follows:

  DEFINE_TEST(SanityTest)
  void run()
  {
      bool val(false);

      Assert(val,
             "Please change val to true, and try again.");
  }
  END_DEF

  As you can see, Assert() should fail when the line is executed as val is 
  initially defined as false.  You can build and run the test using make.

- Run make specifying 'test' as the target.
  > make test

  This step processes myTest.tpp, creates myTest.cpp, and builds, then runs
  the test (myTest.test).  The output will be similar to the following:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myTest.tpp
  |  tpp2cpp.bash: myTest.tpp -> myTest.cpp
  |  src: myTest.tpp dst: myTest.cpp
  |  /usr/bin/g++ -o myTest.o  -I/<CAST_DIR>/include  -fpic\
  |     -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myTest.cpp
  |  /usr/bin/g++ -o myTest.test  -I/<CAST_DIR>/include  \
  |     -shared  -L /<CAST_DIR>/lib myTest.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myTest.test
  |  
  |  casTest: Running tests from: myTest.test
  |  1..1
  |  not ok 1 - SanityTest
  |     ---
  |     Caught cas::Test::Error: ERROR [testCase.cpp(58)]: Assertion FAILED: \
  |  Please change val to true,  and try again.
  |     ---
  |  casTest: 1 tests FAILED.
  |  
  |  make: *** [test] Error 1

  NOTE1:  Of course if you prefer, instead of running "make test", you could 
          run make, then execute casTest passing in myTest.test in a second
          step.

          > make
          > casTest myTest.test

          You can also run multiple test suites from a single invocation.

          > casTest myTest.test myOtherTest.test ../yaTest/yaTest.test

  NOTE2:  The .test suffix is used to identify a shared library containing 
          a collection of one or more tests (ie a suite of tests).  The
          casTest executable loads each .test file specified on the command
          line, maps appropriate symbols, then creates and executes the
          tests within the shared library.  The .test suffix is only a
          convention.  If you write your own make files, rather than using
          the -addTestSuite command option to casTest, you can name them
          anything you like.

- Next, edit myTest.tpp changing the line "bool val(false);" to read
  "bool val(true);"

- Rerun the test.
  > make test

  The output will now indicate success:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myTest.tpp
  |  tpp2cpp.bash: myTest.tpp -> myTest.cpp
  |  src: myTest.tpp dst: myTest.cpp
  |  /usr/bin/g++ -o myTest.o  -I/<CAST_DIR>/include  -fpic\
  |  -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myTest.cpp
  |  /usr/bin/g++ -o myTest.test  -I/<CAST_DIR>/include  -shared\
  |   -L /<CAST_DIR>/lib myTest.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myTest.test
  |
  |  casTest: Running tests from: myTest.test
  |  1..1
  |  ok 1 - SanityTest
  |  casTest: All tests PASSED.

- Other tests can be added to myTest.tpp to create an entire suite of tests.
  Typically, several related tests will be added to the same .tpp file.

Hopefully, this short intro will get you started.  For more detailed
information about the working of casTest, see the manual (well, once its
complete...it's still under construction).

Convenience Macros
------------------
As mentioned in the Quick Start section above, a test can be created with
the macro, DEFINE_TEST(<testName>).  This macro takes a single argument
which is the name of the test class you wish to define.

For example:

      //myTest.tpp
      DEFINE_TEST(MyTest)
      void run()
      {
          bool val(false);

          Assert(false, "Please change val to true.");
      }
      END_DEF

expands to:

      struct MyTest : cas::TestCase
      {
          MyTest()
              cas::TestCase("MyTest")
          {}

          void run()
          {
              bool val(false);

              Assert(false, "Please change val to true.");
          }
      };

cas::TestCase is an abstract class with run() being pure virtual.
cas::TestCase also defines the virtual methods setUp() and tearDown().  setUp()
is automatically called before run(); tearDown() after run() returns.
setUp(), as the name implies, is used to set up test prerequisites.
tearDown() is used to clean up resources that may have been allocated during
setUp(), or, in rare cases, during the running of the test.  Of course,
you are free to use the functions as you see fit.

Two other macros are provided.  DEFINE_BASE(<testName>) is used to define a
test case class that is intended to be used as a base class for other test
classes rather than executed as a test in and of itself.  
DEFINE_TEST_FROM(<derivedTestName>, <baseTestName>) is used to derive a test
from another test.  There are examples of the use of these macros in
casTestSelf.tpp in the test directory (<casParentDir>/cast/src/test).

As you can see, the macros are simply convenient tools to define a class and
provide a constructor that calls the base class, "cas::TestCase", passing the
name of the test as a string.  Any C++ code that is appropriate within a class
definition can be added between the DEFINE_<type>() macro and the END_DEF
macro.  For instance, perhaps you need to allocate an object dynamically for
your test.  One way to do this might look something like:

    //myTest.tpp
    #include "myGame.h"

    DEFINE_TEST(myGameSetPlayerNameTest)
        void setUp()
        {
            newPlayer_ = new MyGame::Player;
        }
 
        void tearDown()
        {
            delete new_Player_;
        }
    
        void run()
        {
            std::string name("Uncle Bob");

            newPlayer_.setName(name);

            Assert(name == newPlayer.name(),
                   "Got wrong name");
        }

    private:
        MyGame::Player* newPlayer_;
    END_DEF

In the above, a MyGame::Player object is created dynamically in setUp().
The setName() function is tested in run().  Then, the object created for the
test is destroyed in tearDown().  A member variable, newPlayer_* is also 
added to the class definition with private access.

Generated make files
--------------------
As mentioned above, the first time you create a new test suite, three files are
generated.  Of course, the test source file (.tpp file) and two make files.
The first, Makefile, is a top-level make file and just calls the other make
file (a single target make file with a .mak suffix) that was created.
Subsequent uses of -addTestSuite within the same directory, will generate
another test source and another single target make file, and will modify the
top-level make file (Makefile) to add the new single target make file to the
list of those called. 

NOTE:  This method of make file management was chosen simply because it is
       similar to other projects on which I have worked.  By collecting common
       rules in project make files and including them, we are (in theory)
       avoiding a lot of duplication in the make file heirarchy.  Of course,
       I readily admit that I'm no make expert, but this seems to work pretty
       well.  If you have a better idea, I'm all ears.

The single target make files (.mak suffix) are meant to be edited.  Each
includes comments indicating where it may be appropriate to customize.  For
instance, if you are creating a test to test a class that depends on librt.so,
just add "-lrt" to the LIBS macro:

##### TODO #####
# If your target must be linked to
# additional libraries, list them here.
#
# EX:
#     -lrt
################
LIBS := -lrt

If you need additional sources, add them to the SRCS macro.  (Don't add any
sources to the TSRCS macro as only one test source can be used.)  Instruction
for most edits you may need to make to your .mak files are included as comments
in the generated .mak file.

Feedback is always welcome
--------------------------
Comments, question, and/or suggestions are most welcome.  Feel free to contact
me at GitHub (obibuffett), or send email to:

    obibuffett@cfl.rr.com
    rlwhite@cfl.rr.com

Thanks very much for trying casTest.  I hope you find it useful.


Randy
