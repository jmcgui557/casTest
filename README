Clean and Simple Test
=====================

Author
------
Randall White (aka obibuffett) (C) 2015
obibuffett@cfl.rr.com
obibuffett@icloud.com
rlwhite@cfl.rr.com

Introduction
------------
casTest is system of software tools (make files, scripts, library, and the
casTest executable) which is designed to make test driven development in C++
a bit easier.  Hopefully, quite a bit easier.  casTest is distributed with all
source code.  It is available in an easy to use self-extracting tarball from
one of my dropbox folders:

    https://www.dropbox.com/sh/2wtklxt4tyqoant/AAA54F3BVCyvVCvJiYVz6WNPa?dl=0

or can be cloned from GitHub:

    https://github.com/obibuffett/casTest.git

casTest started out as a personal project just to explore questions related
to testing frameworks.  As someone once said, to figure out how something
works, sometimes you have to implement it yourself.  (I seem to recall reading
this in one of Scott Meyers' books, but I can't seem to find the quote.  If
I have this wrong, my apologies to both Scott Meyers and the actual author.)
The casTest framework is the result of this exploration and was built using
Test Driven Development principles.  Although the tests found in 
<CAST_DIR>/src/test are now loaded as any other test created with casTest
make files, they started out as self-test routines within casTest.cpp and were
refactored after casTest had matured sufficiently.

Installing casTest
------------------
- Self-extracting tarball

Installing casTest from the self-extracting tarball is probably the easiest
method of installation.  This is especially true for installing to a system
directory such as /usr/local or /opt as root.

To install casTest in this method, just copy installCast.bin to a directory
for which you have access and execute it.  If you'd like to install as root,
just use sudo (or su or login as root) to run installCast.bin.

    > ./installCast.bin
or
    > sudo ./installCast.bin

Whether you install as a normal user or as root, you will be prompted for
a top-level installation location.  To accept the displayed default location,
just hit [enter].  The default installation location for normal users is
$HOME/cast.  For root it is /usr/local/cast.

After entering (or accepting) the installation location, installCast.bin will
do the following:

    - extract itself to the selected location
    - do a full build of all targets
    - create resource scripts (castEnv.sourceMe.bash and castEnv.sourceMe.csh)
      in the installation directory

If you are installing as a normal user, installCast.bin will create a link
to castEnv.sourceMe.bash and castEnv.sourceMe.csh in your HOME directory.
You should source the file appropriate for your shell before beginning a test
creation session.  Each file sets a few environment variables and adds the
path to the casTest executable to your PATH variable.  If you don't use bash,
csh, or tcsh you'll need to create your own script to set the casTest
environment variables.  Sorry for any inconvenience.  If you are installing
as root, these links will not be created.  In this case, users wishing to,
may create the link themselves:

    #Creating a link to /usr/local/cast/castEnv.sourceMe.bash
    > cd $HOME
    > ln -s /usr/local/cast/castEnv.sourceMe.bash .

    or for tcsh or csh

    #Creating a link to /usr/local/cast/castEnv.sourceMe.bash
    > cd $HOME
    > ln -s /usr/local/cast/castEnv.sourceMe.csh .

Whether installed as a normal user or root, castEnv.sourceMe.[bash|csh] can
be sourced directly from the installation directory:

    > . <castParentDir>/cast/castEnv.sourceMe.bash

or, of course,

    > source <castParentDir>/cast/castEnv.sourceMe.csh

Quick Start (normal user installation)
--------------------------------------
After installing casTest, just source castEnv.sourceMe.bash (or
castEnv.sourceMe.csh for csh or tcsh) and you'll be ready to create your
first test.  
 
- Source castEnv.sourceMe.bash.
  > . ~/castEnv.sourceMe.bash
  
  or
  
  > source ~/castEnv.sourceMe.csh

- Create a test dir and cd to it.
  > mkdir ~/myTestDir
  > cd ~/myTestDir

- Initialize a new test suite.
  > casTest -initTest myTest

  This step produces two files within the new directory:
    -- Makefile (makefile for myTest.test)
    -- myTest.tpp (source file for myTest.test)

  Despite the .tpp extension, myTest.tpp is a C++ source file.  It
  illustrates the use of the macros (defined in testCase.h) DEFINE_TEST
  and END_DEF.  These macros are provided to allow tests to be defined
  quickly and painlessly.  If you open myTest.tpp, you will see the
  test, SanityTest, defined as follows:

  DEFINE_TEST(SanityTest)
  void run()
  {
      bool val(false);

      Assert(val,
             "Please change val to true");
  }
  END_DEF

  As you can see, Assert() should fail when the line is executed as val is 
  initially defined as false.  You can build and run the test using make.

- Run make specifying 'test' as the target.
  > make test

  This step processes myTest.tpp, creates myTest.cpp, and builds, then runs
  the test.  The output will be similar to the following:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myTest.tpp
  |  tpp2cpp.bash: myTest.tpp -> myTest.cpp
  |  src: myTest.tpp dst: myTest.cpp
  |  /usr/bin/g++ -o myTest.o  -I/<CAST_DIR>/include  -fpic\
  |     -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myTest.cpp
  |  /usr/bin/g++ -o myTest.test  -I/<CAST_DIR>/include  \
  |     -shared  -L /<CAST_DIR>/lib myTest.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myTest.test
  |  
  |  casTest: Running tests from: myTest.test
  |  1..1
  |  not ok 1 - SanityTest
  |  	---
  |  	Caught cas::Test::Error: ERROR [testCase.cpp(58)]: Assertion FAILED: \
  |  Please change val to true,  and try again.
  |  	---
  |  casTest: 1 tests FAILED.
  |  
  |  make: *** [test] Error 1

  NOTE:  Of course if you prefer, instead of running "make test", you could 
         run make, then execute casTest passing in myTest.test in a second
         step.

         > make
         > casTest myTest.test

        You can also run multiple test suites from a single invocation.

        > casTest myTest.test myOtherTest.test ../anotherTest/anotherTest.test

- Next, edit myTest.tpp changing the line "bool val(false);" to read
  "bool val(true);"

- Rerun the test.
  > make test

  The output will now indicate success:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myTest.tpp
  |  tpp2cpp.bash: myTest.tpp -> myTest.cpp
  |  src: myTest.tpp dst: myTest.cpp
  |  /usr/bin/g++ -o myTest.o  -I/<CAST_DIR>/include  -fpic\
  |  -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myTest.cpp
  |  /usr/bin/g++ -o myTest.test  -I/<CAST_DIR>/include  -shared\
  |   -L /<CAST_DIR>/lib myTest.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myTest.test
  |
  |  casTest: Running tests from: myTest.test
  |  1..1
  |  ok 1 - SanityTest
  |  casTest: All tests PASSED.

- Other tests can be added to myTest.tpp to create an entire suite of tests.
  Typically, several related tests will be added to the same .tpp file.
  Hopefully, this short intro will get you started.  For more detailed
  information about the working of casTest, see the manual (currently under
  construction).

Feedback is always welcome
--------------------------
Comments, question, and/or suggestions are most welcome.  Feel free to contact
me at GitHub (obibuffett), or send email to:

    obibuffett@cfl.rr.com
    rlwhite@cfl.rr.com

Thanks very much for trying casTest.  I hope you find it useful.


Randy
