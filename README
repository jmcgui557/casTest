Clean and Simple Test
=====================

Author
------
Randall White (aka obibuffett)
obibuffett@cfl.rr.com
obibuffett@icloud.com

Introduction
------------
casTest is system of software tools (make files, scripts, and the casTest
executable) which designed to make test driven development in C++ a bit easier.
Hopefully, quite a bit easier.  casTest is distributed with all source code.
It is available in an easy to use self-extracting tarball or can be obtained
cloned from GitHub:

    https://github.com/obibuffett/casTest.git

The instructions below assume you are installing casTest via the
self-extracting tarball as a normal user.  If you are installing as root,
everything is pretty much the same.  Of course you'll likely be installing
to some system directory to allow a group of users to use casTest.  In this
case, each user intending to use casTest should create a link in his/her
home directory to /usr/local/cast/castEnv.sourceMe.bash. (Assuming you
install to the default location.  If you chose a different install path,
just subsitute the installtion path.)  Sourcing this file will create a few
environment variables which point to various casTest directories, and add
/usr/local/cast/bin to your PATH variable.  Hopefully, the Quick Start
section below will walk you through setup and use.  casTest meant to be
cleanly coded, and easy to use (and understand).  Comments, question, and/or
suggestions are most welcome.  Feel free to contact me at GitHub (obibuffett),
or send email to:

    obibuffett@cfl.rr.com

Quick Start (normal user installation)
--------------------------------------

These instructions assume the user is using the bash shell.  The environment
script should be easy to adapt for other shells as it only sets a few 
environment variables.  (Sorry for any inconvenience.) 
 
- Run installCast.bin.
  > ./installCast.bin

- Source castEnv.sourceMe.bash.
  > . ~/castEnv.sourceMe.bash

- Create a test dir and cd to it.
  > mkdir -p ~/myKata
  > cd ~/myKata

- Initialize a new test suite.
  > casTest -initTest myKata

  This step produces two files within the new directory:
    -- Makefile (makefile for myKata.test)
    -- myKata.tpp (source file for myKata.test)

  Despite the .tpp extension, myKata.tpp is a C++ source file.  It
  illustrates the use of the macros (defined in testCase.h) DEFINE_TEST
  and END_DEF.  These macros are provided to allow tests to be defined
  quickly and painlessly.  If you open myKata.tpp, you will see the
  test, SanityTest, defined as follows:

  DEFINE_TEST(SanityTest)
  void run()
  {
      bool val(false);

      Assert(val,
             "Please change val to true");
  }
  END_DEF

  As you can see, Assert() should fail when the line is executed as val is 
  initially defined as false.  You can build and run the test using make.

- Run make specifying 'test' as the target.
  > make test

  This step processes myKata.tpp, creates myKata.cpp, and builds then runs the
  test.  The output will be similar to the following:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |     -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  \
  |     -shared  -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |  
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  not ok 1 - SanityTest
  |  	---
  |  	Caught cas::Test::Error: ERROR [testCase.cpp(58)]: Assertion FAILED: \
  |  Please change val to true,  and try again.
  |  	---
  |  casTest: 1 tests FAILED.
  |  
  |  make: *** [test] Error 1

  NOTE:  Of course if you prefer, instead of running "make test", you could 
         run make, then execute casTest passing in myKata.test in a second
         step.

         > make
         > casTest myKata.test

        You can also run multiple test suites from a single invocation.

        > casTest myKata.test myOtherKata.test ../anotherKata/anotherKata.test

- Next, edit myKata.tpp changing the line "bool val(false);" to read
  "bool val(true);"

- Rerun the test.
  > make test

  The output will now indicate success:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |  -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  -shared\
  |   -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  ok 1 - SanityTest
  |  casTest: All tests PASSED.

- Other tests can be added to myKata.tpp to create an entire suite of tests.
  Typically, several related tests will be added to the same .tpp file.
  Hopefully, this short intro will get you started.  For more detailed
  information about the working of casTest, see the manual (currently under
  construction).

