casTest is designed to make test driven development in C++ a bit easier.
Hopefully, you will find this to be true.

Quick start (normal user installation)
--------------------------------------

These instructions assume the user is using the bash shell.  The environment
script should be easy to adapt for other shells as it only sets a few 
environment variables.  (Sorry for any inconvenience.) 
 
- Run installCast.bin.
  > ./installCast.bin

- Source castEnv.sourceMe.bash.
  > . ~/castEnv.sourceMe.bash

- Create a test dir and cd to it.
  > mkdir -p ~/myKata
  > cd ~/myKata

- Initialize a new test suite.
  > casTest -initTest myKata

  This step produces two files within the new directory:
    -- Makefile (makefile for myKata.test)
    -- myKata.tpp (source file for myKata.test)

  Despite the .tpp extension, myKata.tpp is a C++ source file.  It
  illustrates the use of the macros (defined in testCase.h) DEFINE_TEST
  and END_DEF.  These macros are provided to allow tests to be defined
  quickly and painlessly.  If you open myKata.tpp, you will see the
  test, SanityTest, defined as follows:

  DEFINE_TEST(SanityTest)
  void run()
  {
      bool val(false);

      Assert(val,
             "Please change val to true");
  }
  END_DEF

  As you can see, Assert() should fail when the line is executed as val is 
  initially defined as false.  You can build and run the test using make.

- Run make specifying 'test' as the target.
  > make test

  This step builds then runs the test.  The output will be similar to the
  following:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  err: 0
  |  Done
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |     -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  \
  |     -shared  -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |  
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  not ok 1 - SanityTest
  |  	---
  |  	Caught cas::Test::Error: ERROR [testCase.cpp(58)]: Assertion FAILED: \
  |  Please change val to true,  and try again.
  |  	---
  |  casTest: 1 tests FAILED.
  |  
  |  make: *** [test] Error 1

- Edit myKata.tpp changing the line "bool val(false);" to read
  "bool val(true);"

- Rerun the test.
  > make test

  The output will now indicate success:

  |  /<CAST_DIR>/tools/tpp2cpp.bash myKata.tpp
  |  tpp2cpp.bash: myKata.tpp -> myKata.cpp
  |  src: myKata.tpp dst: myKata.cpp
  |  err: 0
  |  Done
  |  /usr/bin/g++ -o myKata.o  -I/<CAST_DIR>/include  -fpic\
  |  -D_XOPEN_SOURCE=700 -g -fpic -DCAS_TEST -c myKata.cpp
  |  /usr/bin/g++ -o myKata.test  -I/<CAST_DIR>/include  -shared\
  |   -L /<CAST_DIR>/lib myKata.o  -lcasTest
  |  /<CAST_DIR>/bin/casTest myKata.test
  |
  |  casTest: Running tests from: myKata.test
  |  1..1
  |  ok 1 - SanityTest
  |  casTest: All tests PASSED.

- Other tests can be added to myKata.tpp to create an entire suite of tests.
  Typically, several related tests will be added to the same .tpp file.
  Hopefully, this short intro will get you started.  For more detailed
  information about the working of casTest, see the manual.
